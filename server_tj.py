## tsfServer.py
##

"""
A WebServer for serving the web page and web socket connection in order to play
TSF through a web browser.
"""

# import pyTSF as tsf
# import agents
import sys
import time
import signal
import argparse
import time, os

import numpy as np
import torch
import data
from models import *
from comm import CommNetMLP
from utils import *
from action_utils import parse_action_args
from evaluator import Evaluator
from args_tj import get_args
from inspect import getfullargspec
from action_utils import *

import string
import random
import logging
import tornado.escape
import tornado.ioloop
import tornado.options
import tornado.web
import tornado.websocket
import os.path
import uuid
import time
import json
from tornado.options import define, options
import datetime
import dateutil.tz

LOG_ROOT = os.path.abspath("/home/huaol/data/tj")

define("port", default=8005, help="run on the given port", type=int)

Transition = namedtuple('Transition',
                        ('state', 'action', 'action_out', 'value', 'episode_mask', 'episode_mini_mask', 'next_state',
                         'reward', 'misc'))

token_dicts = [{
    1:{
        'raw':[0.6040403734377806, 0.13321872938707033, 0.6225379371766863, 0.6438431015855542, 0.8176508077832895, 0.22135085417361947, 0.5990943651397344, 0.10481806834908863, 0.128328925243851, 0.8724500245076549, 0.1565591296517562, 0.17660332030211903, 0.25436841740124616, 0.4142554049633899, 0.06978323619076973, 0.4246532011422206, 0.15974825997941522, 0.07698068720469117, 0.39288046336880983, 0.5657027751231875, 0.36802677413073676, 0.7906401167064119, 0.11390508764694038, 0.5442080195331794, 0.45856155430806045, 0.8042894248352035, 0.08988973764275301, 0.27125049685510194, 0.10060616482338727, 0.6642246373271767, 0.7126576986221979, 0.373203140511461, 0.7321803400941472, 0.5642088248143993, 0.08540946408858395, 0.30308704277620724, 0.883647546787118, 0.360285701443721, 0.6479163835089796, 0.15406413587908857, 0.5858297357402664, 0.2167893480692322, 0.41943144129553844, 0.22328206008916016, 0.04269532975671214, 0.21951686621170896, 0.48633706918384534, 0.1271674722286949, 0.9022858304625798, 0.114842780954865, 0.899197828173274, 0.7064397521560566, 0.15310865527547843, 0.2122083203652655, 0.5362732120863758, 0.46885087096469946, 0.5160474389720466, 0.7724323466819127, 0.6170249031863415, 0.09739531419292384, 0.4194901375663098, 0.436510995047125, 0.3360823845066209, 0.6482559633950575],
        'loc':[[11,7]],
        'conf':[1]
    },
    2: {
        'raw': [0.28362865723922076, 0.5271785510587778, 0.5118445083216472, 0.8492017150482619, 0.06112941405782542, 0.5974189215278951, 0.12925696168405393, 0.12017883450052998, 0.23943377163141524, 0.5068521469935295, 0.23270890028195126, 0.11028337641795916, 0.8248425752817754, 0.14716589054987825, 0.22864040705993244, 0.6146324767954342, 0.2374972179489302, 0.283469370746407, 0.1353834577362439, 0.22913343126823613, 0.7812804522925197, 0.36375273054479956, 0.10371132059550298, 0.6970537772519336, 0.146367712376438, 0.15215388298699675, 0.09070756048664227, 0.16242423895514124, 0.8188261669717166, 0.7871067107051283, 0.1192472171725323, 0.4198561842133856, 0.7187129635462735, 0.38436406070988877, 0.609323094846896, 0.29954679858147565, 0.6248218970363825, 0.7050898742449219, 0.7740064562400962, 0.23865420517700453, 0.057432215140191686, 0.11398364515925505, 0.5916259983867973, 0.2939529622712109, 0.2429690013876148, 0.37406572982811814, 0.3074392579762755, 0.8773878235269769, 0.763542675367321, 0.20756164451833725, 0.3924283474831052, 0.14250809843819046, 0.19417066619481418, 0.6133165311352075, 0.08104621238111843, 0.21851349642054724, 0.218402491703985, 0.873836875556836, 0.5872182496427012, 0.04593692565414207, 0.16218164859199208, 0.5753016286281047, 0.23783061026071747, 0.08561291130125075],        'pca': [-0.24235778,-0.69981944],
        'loc': [[7,3]],
        'conf':[1]
    },
    3: {
        'raw': [0.46800272085320693, 0.4221413925304471, 0.08224262155709386, 0.5860375128667011, 0.21316546320144267, 0.3731712804807428, 0.6232885501379409, 0.10051210298159953, 0.40967982117706797, 0.18239247858063048, 0.21864771301140257, 0.12379013928824076, 0.6928722121652583, 0.08083288091029298, 0.0728282966058127, 0.14511514512720847, 0.24711178815221546, 0.15747618730873103, 0.09489308348473266, 0.6980165540284592, 0.2884708742794762, 0.7691353574468414, 0.139509893788407, 0.17057227248368415, 0.16983590932411807, 0.6026130782961789, 0.597578514417666, 0.8028998208023065, 0.10278512361607788, 0.5097952788663616, 0.5075914183328659, 0.06845631749011008, 0.19440276224718528, 0.4758577598451058, 0.8860517152545971, 0.6927450780393258, 0.37898015586819767, 0.592664396772546, 0.3618551169160973, 0.6322505916059503, 0.26755167733730434, 0.20801407316284298, 0.12731529143912437, 0.7591471461686211, 0.7295735054682272, 0.5067267875943574, 0.08536954917731206, 0.16688146852903604, 0.4872455021811091, 0.5330398587803984, 0.7812834957233117, 0.8748236501382212, 0.30490337461704675, 0.7606945323644744, 0.6134934596884563, 0.30866787428318826, 0.6782537733168121, 0.21233215788766172, 0.4583306231650217, 0.8238398863992803, 0.20027606722236982, 0.7448433020495693, 0.6203136421093574, 0.17019952264464858],
        'loc': [[11,7],[6,8]],
        'conf':[0.77,0.22]
    },
    4: {
        'raw': [0.8852750224958383, 0.9322459432804564, 0.22913352603820536, 0.016989552038496145, 0.9464935475285075, 0.8136107393623414, 0.2078023171162693, 0.35571293069107407, 0.9409992364893308, 0.6395389192254687, 0.005217955921715214, 0.22543655203919433, 0.06825327497100601, 0.014457760872402307, 0.9334956257425527, 0.016187874535515075, 0.6175983926426768, 0.9530132567494956, 0.3312729174680892, 0.05329370657760782, 0.07612282864082608, 0.04706579229798669, 0.027097022620116717, 0.02843173527369306, 0.14116272126321736, 0.9120305616315642, 0.4640917290898369, 0.013877012623998795, 0.04043342564297375, 0.2871137144152161, 0.550544198120487, 0.9590775305533636, 0.010101807998411368, 0.03625598534961923, 0.01781509519372761, 0.042227926439010875, 0.8719208605964763, 0.3149665841661899, 0.00951127053512397, 0.02188237907824879, 0.7656482892863778, 0.8385416328146673, 0.02059642129384023, 0.9560773439433976, 0.3415341260333201, 0.9231681548177013, 0.6017159192565121, 0.06278602968182236, 0.01448783451047793, 0.0220583269917888, 0.7525795724963976, 0.22733972070510286, 0.24687135584415856, 0.048525452117798226, 0.8988147579404668, 0.10907706582934382, 0.09849398721445501, 0.29413992785152226, 0.32642510467776287, 0.8749304194498165, 0.37918860125758297, 0.05515788040538079, 0.2144695571909342, 0.11846455634774863],
        'loc': [1,6],
        'conf':[0.96]
    },
    5: {
        'raw': [0.11766369372615335, 0.01220134983118061, 0.013598579383780911, 0.02699181845104997, 0.03961003342862267, 0.6458465572924181, 0.04826851913520055, 0.032882726815840216, 0.06326418403190233, 0.02156883204169741, 0.035178336426945477, 0.05897269870539444, 0.4990471372223412, 0.20038469575387652, 0.13896240185447184, 0.21575303182306832, 0.8772887665356907, 0.591573945876378, 0.8084753447764076, 0.004952313522951466, 0.02161555147778584, 0.24912451465363683, 0.2893230308614852, 0.09196196687009679, 0.011519235958014783, 0.013986438239469184, 0.5776162159493051, 0.0656419459055165, 0.4282755600336967, 0.8733298424504153, 0.02889808997154281, 0.19134319753748533, 0.07049188001456934, 0.05572621910256655, 0.38490432131890634, 0.06812335064840805, 0.013492385677669593, 0.027289777682602146, 0.7445848271411011, 0.021763802509241658, 0.25479975142666594, 0.762586815638901, 0.42345670871149393, 0.43101563136237286, 0.032497610099290815, 0.8399239914046047, 0.6749548233975989, 0.8816557684791724, 0.036878972301383796, 0.5137177178741076, 0.06329812935920369, 0.020402959564768928, 0.8939865989421301, 0.09594827257003227, 0.1076058089493082, 0.7360276475720576, 0.7865090824578089, 0.8148199491545517, 0.10158237114351881, 0.6550942810854374, 0.8167047104516982, 0.0466905019255448, 0.24964970920773263, 0.156574550668339],
        'loc': [[7,3],[4,6],[7,7]],
        'conf':[0.26,0.26,0.23]
    },
    6: {
        'raw': [0.43382337491643086, 0.5451085635787862, 0.15836971997511312, 0.2813224991622566, 0.20626183533782064, 0.6267789519730707, 0.2640861717168022, 0.1708911906952644, 0.3684565332071115, 0.7814346490462116, 0.723377323205547, 0.2174843187896123, 0.16870832903235164, 0.29699526187826436, 0.2778129951378025, 0.13365680307820432, 0.20438440300792424, 0.06223454570994455, 0.10742547372835955, 0.3262998039805924, 0.2417158907819716, 0.2257097666707191, 0.37195382576529284, 0.28398296786843846, 0.4679777512668446, 0.1614444225608595, 0.23030880823325195, 0.6918041776461759, 0.229518648273303, 0.20083127735872475, 0.3142078159762916, 0.10146347130509493, 0.7266800330433827, 0.6914181590660347, 0.22886481679491238, 0.10994835881881343, 0.7625866957118175, 0.0853456196511091, 0.34991210531647104, 0.1585828885006192, 0.2172438070097852, 0.7944238855425513, 0.4380072329489326, 0.04764334642207408, 0.1208683614212252, 0.625218587677086, 0.09280880926450273, 0.6624664411592155, 0.42674285310586746, 0.19057720022062385, 0.1202315049516395, 0.2037552649467082, 0.46719115641764186, 0.11611759490626287, 0.4537972877806313, 0.11818026256960179, 0.4461100536702554, 0.2445005572735258, 0.3257521117385675, 0.15827639821070497, 0.16271493693761901, 0.5484645509122575, 0.08446729246020802, 0.08257906639476134],
        'loc': [[7,0],[0,6],[13,7],[6,13]],
        'conf':[0.21,0.21,0.21,0.21]
    },
    7: {
        'raw': [0.05733200420178902, 0.13910337919114257, 0.08249868066736915, 0.10515376158269109, 0.36141842002281427, 0.17036192343661705, 0.16366917434842382, 0.23595104180869592, 0.534526851973613, 0.3997488928897366, 0.4004180406665603, 0.20148667171453397, 0.14441272086245036, 0.15093068691108036, 0.786043081223344, 0.05633273484485031, 0.05571166698668013, 0.07584955506050783, 0.1737081008641565, 0.6063389392494957, 0.6632015817902864, 0.7471923348746791, 0.0983629974414211, 0.10779127132171828, 0.12397269739086718, 0.503100636639667, 0.7624412149466001, 0.11893146941283515, 0.7004823546397061, 0.07406242618487549, 0.3769489966432978, 0.06548912580206975, 0.6522090091430702, 0.6351078818123457, 0.1621445225624181, 0.07514811778598367, 0.3306006737603077, 0.6462157990364537, 0.852211461273502, 0.2976063806942057, 0.35862713859695755, 0.18411753328741898, 0.17555153794539716, 0.2908261427723726, 0.5176862298129746, 0.07411333541059799, 0.46672993969507504, 0.4810824563612931, 0.5580193809644505, 0.773024030874294, 0.39786089392803614, 0.4667860512853159, 0.7604659830054215, 0.1130137755807772, 0.6695642687834439, 0.2023332390271375, 0.09969236928215469, 0.6910311364199414, 0.33281516031403174, 0.18035121720073996, 0.32835698981907, 0.10728706716545816, 0.05354616425471081, 0.29423003061828],
        'loc': [[7,2],[3,6],[12,7],[6,9]],
        'conf': [0.17, 0.17, 0.18, 0.15]
    },
    8: {
        'raw': [0.030316486405104436, 0.11258194655867285, 0.029051464724754818, 0.06862328932595746, 0.0685776344761793, 0.1776324458103213, 0.0753253528661569, 0.0306119489504877, 0.0531749381130115, 0.3841558676994938, 0.23843733071729392, 0.10916055201644427, 0.021074549679690326, 0.02251487822891121, 0.040484163679570855, 0.04127945175220946, 0.05134259923379444, 0.03991599333513075, 0.07020400230183065, 0.1069872857469405, 0.06701642997183377, 0.033422148035999064, 0.03733333179388035, 0.08738836644414741, 0.10564345978787537, 0.05970775483719042, 0.09407802968125632, 0.2437077827428931, 0.03497296202518068, 0.08363276803040219, 0.0905179661704572, 0.018602569200533735, 0.1346966049526697, 0.14615544474349085, 0.0444488777541397, 0.045291155934365085, 0.23443912507577186, 0.09863387198616136, 0.12326391517537015, 0.12285064672418343, 0.027737554804461457, 0.4836529819874476, 0.18255726052120777, 0.05579838756629777, 0.023983912008137463, 0.13772016171499685, 0.04972024083167981, 0.04801485979074951, 0.06842714039162011, 0.07392816920351686, 0.11331124920094762, 0.34285283276927675, 0.15039817420868845, 0.06135669699999595, 0.03535514345361588, 0.07050837528861571, 0.0496175685294152, 0.14144840335549866, 0.021413128057819347, 0.2106618843571951, 0.1341458211078725, 0.05708507482778108, 0.06917163116607515, 0.08429701008355575],
        'loc': [],
        "conf":[]
    }
},
{
    1:{
        'raw':[0.3277510001766001, 0.30677949221830464, 0.03951339558643531, 0.2593948569218712, 0.5167707614824382, 0.026168907578098418, 0.8600338001765584, 0.0330936633820799, 0.21666570199720453, 0.07975037899442695, 0.15997439195263263, 0.2040147381551858, 0.056498945488982946, 0.12634010803137216, 0.5872701962069428, 0.13964299840068595, 0.3926768060639056, 0.11426491306015422, 0.3122645550785121, 0.325149928746583, 0.6467280964039902, 0.7395973483014747, 0.4944134867825756, 0.7860686000078716, 0.2314947753028286, 0.33586194630440896, 0.1301011959954666, 0.3291831749340257, 0.3258125518837655, 0.06554863394703686, 0.5366942568017014, 0.3928783918911977, 0.10325254004278885, 0.7598938551835265, 0.5064790740611491, 0.08369500536171304, 0.6508200714933398, 0.7932876034315341, 0.6801490206736512, 0.6190034332955187, 0.7917958407366443, 0.026037605553499477, 0.0318788467967024, 0.31604089664926227, 0.38287921953626664, 0.030412155782978064, 0.3819824638384351, 0.22106308140682115, 0.23245829467114043, 0.38338391627118606, 0.07470472338813654, 0.0595926265355389, 0.043859851175636, 0.753597220247362, 0.39166401561412034, 0.03287614685567617, 0.10246149061029851, 0.02933749716056034, 0.012066212425024876, 0.6303239850540776, 0.312632127637709, 0.8216959830266328, 0.10347404551374105, 0.520696755372048],
        'loc':[[6,9]],
        'conf':[1]
    },
    2: {
        'raw': [0.4532097591594605, 0.4145110616931457, 0.08272887529309052, 0.5926600300914661, 0.20698163026752628, 0.3673087051923279, 0.6251514665066039, 0.10154523575245056, 0.40351817262349493, 0.18960891068724092, 0.22952786341314785, 0.12488834022396675, 0.6924890410777702, 0.08073707690773779, 0.07064372567325855, 0.1470194219818797, 0.23916944255763153, 0.15175338492754198, 0.09140024857499951, 0.7026035822734557, 0.2901556750392429, 0.7684308023168251, 0.1390658959012557, 0.17245176639830442, 0.1713464121684839, 0.5952484794175749, 0.5927397574506019, 0.8087918143209152, 0.10237204495267642, 0.5022563127115254, 0.5041951224792856, 0.06519792934853015, 0.20236199995475704, 0.4826758381374478, 0.8859338189198885, 0.6947617681086421, 0.3802194431075473, 0.591267248177616, 0.3576678423171483, 0.6364600149097177, 0.26023088982678527, 0.20733268553413817, 0.1291356376944017, 0.7451326644913271, 0.7304823715527616, 0.498360342187175, 0.08088463192057602, 0.16463280228561292, 0.49300827713322165, 0.5276503260025962, 0.780366797139566, 0.8795521539385114, 0.30225635701520465, 0.7640889247742627, 0.6074466643899992, 0.30700569232144925, 0.6725994580101204, 0.20869280032748738, 0.45520768103434406, 0.8140924525526688, 0.19433364715755158, 0.7497147230661073, 0.6147639375919011, 0.16776496819003803],
        'loc': [[11,7]],
        'conf':[0.84]
    },
    3: {
        'raw': [0.40115901069300236, 0.4887104282580094, 0.1387255811915146, 0.25613334998446974, 0.17539097837616, 0.6710260759344103, 0.23209702411900823, 0.1645287466454805, 0.33171358613750307, 0.7570684265092938, 0.6954603986888865, 0.19818664561077282, 0.19988939426677663, 0.34043243003158113, 0.24283895885554987, 0.15313297777701212, 0.23574467892083628, 0.07318420599648673, 0.12568295450951536, 0.2855287240632167, 0.20911821763013433, 0.20120693531303982, 0.4067478661115605, 0.2622797653233079, 0.43243028129808286, 0.1363346615802509, 0.26066050076838737, 0.6771205962274847, 0.2618086543091057, 0.2339964062366164, 0.27318915930736215, 0.10195343815269567, 0.714324855261961, 0.6551891266714422, 0.2537667829312093, 0.10995745792739262, 0.7243363953450574, 0.07139279393048843, 0.3790206514752745, 0.13789910426717789, 0.1989168975174535, 0.8233223485464338, 0.493038570883503, 0.05342316841749074, 0.100778747212602, 0.667823971010754, 0.1033693597889102, 0.7062251467227891, 0.38677339279879563, 0.2077953916402054, 0.10392109144660047, 0.17698307687295772, 0.5155306367391517, 0.1023085954248218, 0.40952757396387246, 0.14119160752791496, 0.49830741246744, 0.2793935405638556, 0.3114765772611451, 0.1718748882984167, 0.18750802163534852, 0.509512856326481, 0.09548734723435286, 0.07194180652788607],
        'loc': [[6,12]],
        'conf':[0.88]
    },
    4: {
        'raw': [0.881567370455996, 0.9303125929748497, 0.2310068694332294, 0.017056952333994072, 0.9461707857871302, 0.8125691975037892, 0.21075874496132663, 0.36095245845372614, 0.9399489851546227, 0.6409415713708215, 0.005288136775480592, 0.2294801313233978, 0.06809597398111888, 0.01498249455659454, 0.9328756104023734, 0.016436055780375023, 0.6130319683132032, 0.9528202289346113, 0.3340171443348081, 0.05332865782871673, 0.07716690527451842, 0.046727807462620556, 0.02734742729722446, 0.028650911682161224, 0.14433633564555964, 0.9111804176463844, 0.4633969025804775, 0.014070580391816755, 0.04071056498754992, 0.2865582575234094, 0.5552387783294165, 0.9577901573941486, 0.010334822532830995, 0.036568339832103156, 0.01766631874286166, 0.04348332535779508, 0.8718713868102175, 0.3165579551150855, 0.009621672997553857, 0.021866960968416248, 0.7673981129936797, 0.8338159736642607, 0.021209675607659115, 0.9552615893335775, 0.3385624916021279, 0.9220277932780923, 0.6019564044856988, 0.062231804592039724, 0.01442527553442286, 0.022148283683850967, 0.7523748748691338, 0.23093468962754166, 0.2443686837309183, 0.04827871198143601, 0.8991217681052552, 0.10926022710247253, 0.09899921845867259, 0.29569653461592704, 0.3164516655069506, 0.8726099694714754, 0.38368105167819516, 0.054330930227133555, 0.21593796690642966, 0.11785694773500095],
        'loc': [1,6],
        'conf':[1]
    },
    5: {
        'raw': [0.11484534077203744, 0.012416564380095158, 0.013256214795957162, 0.026792474834761527, 0.0391154049836418, 0.6495021697065723, 0.04764391487867934, 0.03348304107530382, 0.06470087742422892, 0.022290802698001457, 0.035960911744577224, 0.059129428638503914, 0.4940609160188542, 0.19613207101915514, 0.13838969610765342, 0.2104563092796133, 0.8754700939668155, 0.5934082277346507, 0.8028821288680876, 0.004971866554369941, 0.021329111326817408, 0.24060741004832661, 0.2787699616651119, 0.09075480648577683, 0.011710326585814354, 0.013702233660516821, 0.5732989025365197, 0.06518722949353203, 0.41940201303711794, 0.8704885261735308, 0.02888401486458754, 0.18929612826434658, 0.07045434997509213, 0.05501447501569943, 0.3719455160807154, 0.06656094712365228, 0.013783597786546368, 0.026830612359392797, 0.7336760422803795, 0.021936271801869054, 0.24639277774954502, 0.7656894891929971, 0.4237079967679473, 0.42856257128647085, 0.03224256779816653, 0.8405585985045445, 0.6677624398659715, 0.8793065630243725, 0.03578378309050403, 0.49725521685676755, 0.06209899959669146, 0.021015563626453657, 0.8922496814391903, 0.09370323947278714, 0.1052424573815573, 0.732922421727421, 0.7805451581525777, 0.8116768220620802, 0.09775732289513211, 0.646813323781583, 0.8123637808127947, 0.04559815374415803, 0.24353508813082736, 0.15252761030960732],
        'loc': [[7,3],[4,6]],
        'conf':[0.42,0.41]
    },
    6: {
        'raw': [0.05466880047823639, 0.13517217855722435, 0.08595255036024446, 0.10870058153010201, 0.35693428639131936, 0.16328084920042937, 0.16764123769922765, 0.24054106605041592, 0.5292930542974569, 0.4086466744741381, 0.4086920326563084, 0.20402587997278, 0.14336329315957638, 0.15253891155344762, 0.7819384036065479, 0.05696480514566026, 0.05282280148834273, 0.07151629459096495, 0.1701303642035768, 0.6122694380356476, 0.6692091765925451, 0.7477128045354826, 0.0965357518203029, 0.11051047854816835, 0.12935700883980214, 0.498645905879371, 0.7543545010455296, 0.12245169575241317, 0.6983941223027431, 0.07238586698159775, 0.3752914013948985, 0.06299198070330586, 0.6609631354689403, 0.646205089795607, 0.16007949391686552, 0.07688094413359446, 0.3322782279254203, 0.6463293415452271, 0.8533491338172644, 0.305139105501993, 0.3530914328841052, 0.1792729291336297, 0.17814172390638444, 0.2816543216821408, 0.5177009701771522, 0.07044884962935795, 0.4580478882030251, 0.47296868520338875, 0.5694323204368439, 0.7710555659923096, 0.39720379891347185, 0.47909859693389656, 0.7537121203177124, 0.11583535873039, 0.6664732007155988, 0.1999237285861563, 0.0973594781261725, 0.685881857320322, 0.32681048968685644, 0.17057793292883922, 0.32396747331954157, 0.1096640945537035, 0.05356741840967253, 0.29433266682507014],
        'loc': [[7,2],[12,7],[6,9],[11,7],[3,6]],
        'conf':[0.18,0.19,0.15,0.17,0.17]
    },
    7: {
        'raw': [0.02975867708392162, 0.11420942457236444, 0.029034851754290904, 0.06806378422337714, 0.06694918391110882, 0.17683600065670288, 0.07358231262894233, 0.030029036530256643, 0.053315668554991924, 0.38395332496288326, 0.2438057635407064, 0.1053732974733649, 0.0208140377975595, 0.021788478867380744, 0.03939021324842045, 0.0399733826262424, 0.05071494014170865, 0.03919426241758494, 0.06827149830993319, 0.1067558396152494, 0.06653837308823814, 0.0330725878245948, 0.03650836606027113, 0.08509951977508667, 0.10529199118560051, 0.05802156354315973, 0.09038807049723663, 0.245434608055961, 0.03398988111547359, 0.08273310890634337, 0.08909467287045199, 0.017588038807653486, 0.13550260725688423, 0.14520744791230583, 0.044463451515936094, 0.044026894960829795, 0.23182381473324415, 0.0981541826017732, 0.11948988912495849, 0.12162137577592601, 0.02632913655034719, 0.47855981499398825, 0.1792782336430333, 0.053392902801227125, 0.02423054284334962, 0.13662298597199468, 0.04757884762239618, 0.04805792795213309, 0.06908376319104521, 0.0713170212997628, 0.10973790576914744, 0.343453893121806, 0.1495975709351522, 0.0601316291624479, 0.03400986295255599, 0.0689393345401591, 0.04887858651745609, 0.13814575951163327, 0.021420212429106272, 0.20556048168797547, 0.12961076441483885, 0.05668828558221085, 0.06528914180058559, 0.08227684087341922],
        'loc': [],
        "conf":[]
    }
},
{
    1:{
        'raw':[0.2833531608630129, 0.5268320469065213, 0.5117305349484428, 0.8492584426781474, 0.061062596196741675, 0.5976940321616365, 0.12915600786636391, 0.12026246445713998, 0.23924570123292635, 0.5069357870284853, 0.23290186041370142, 0.11026415613512797, 0.8249506596511941, 0.1472562130968851, 0.22838020253964592, 0.6146852617426141, 0.23744223081553661, 0.28336837761050665, 0.13529337354740478, 0.22891208787057912, 0.7809481491887972, 0.36314642218168625, 0.10369128512946278, 0.6969013728931931, 0.14639645858392553, 0.15197825898609096, 0.09065838212030876, 0.16253739024496452, 0.8187524606527764, 0.7869914219073663, 0.11912671559835097, 0.4193267418292971, 0.7190892904633476, 0.38423926040138634, 0.609187598259831, 0.29972759884218525, 0.6246015706295416, 0.7044935958486452, 0.7738011082500822, 0.23846326846040317, 0.057401248105822596, 0.1140274821729209, 0.5920316636251178, 0.2936300598176847, 0.24277543709761706, 0.37429186809154325, 0.3069658486140694, 0.8774331659204264, 0.763499963290303, 0.20734053754476842, 0.3920252655084448, 0.14248908300256521, 0.19421262557923266, 0.6129563411296485, 0.08101458410170803, 0.2186532093457811, 0.2185416263669952, 0.8737577013227487, 0.5869707046126186, 0.045922650489643314, 0.16207397599166995, 0.5750563399582262, 0.23770325686452565, 0.08555305316978244],
        'loc':[[8,7]],
        'conf':[1]
    },
    2: {
        'raw': [0.3298356535315742, 0.3082476020785934, 0.03914794875715043, 0.25978747171697913, 0.5160713849033959, 0.02627485142697734, 0.8602585138919713, 0.03301155505520957, 0.21889988374576985, 0.08013800732646267, 0.16204157792194962, 0.20395885432727712, 0.05617426545755508, 0.1260971680990732, 0.5847547501230641, 0.13896507882691028, 0.3926556313711326, 0.11399061646426933, 0.3090644848154316, 0.32481560857422254, 0.6468083563207084, 0.7409402718815742, 0.4961944975742935, 0.7869679048963464, 0.23414974273337757, 0.33506899762989245, 0.1288722637935801, 0.32941597628378294, 0.3255749444533328, 0.06509305146551742, 0.5357249328107437, 0.3908636578347216, 0.10366354701462982, 0.7610936325465619, 0.5067842097523897, 0.08324330644901887, 0.6497902428076415, 0.7914903413614965, 0.6829198114693039, 0.6191259032643858, 0.7913690367956965, 0.026205471639177077, 0.03177106102578258, 0.3135396047358139, 0.3824614283663885, 0.030529327937585372, 0.3791484268171742, 0.21934600407906876, 0.2336142233700585, 0.3859856569004618, 0.07429168780407173, 0.05987358670151341, 0.043667604144075396, 0.7541494339040191, 0.391413532225224, 0.03269111140215577, 0.10166543255113154, 0.029150211158517726, 0.012031910430569745, 0.6284483080696127, 0.3093816288713856, 0.8227876666706242, 0.1030723745493137, 0.5229717665416783],
        'loc': [[8,7]],
        'conf':[1]
    },
    3: {
        'raw': [0.46903381330381216, 0.4215364954981835, 0.08252283124225637, 0.5840630863789419, 0.21342813865888216, 0.375598836231245, 0.6206770283681836, 0.10162368072900925, 0.41133701649425236, 0.1819662478146053, 0.21632748217523484, 0.12333578541863896, 0.6939577166076626, 0.08080761596682692, 0.07309210533984462, 0.14518819158287224, 0.24765084595190381, 0.1592086135222193, 0.09523450870325317, 0.6955156893663879, 0.2860277398086961, 0.7671011336331695, 0.13819984693815782, 0.16921210297810935, 0.16844490266570994, 0.604181626855452, 0.5984619700117036, 0.8014862415445967, 0.10274142550924893, 0.5112506436292338, 0.506601823723332, 0.06915685302791802, 0.19387778474798745, 0.4730201666183146, 0.8850628167992025, 0.6926096772090494, 0.3786890211988512, 0.5893869842945245, 0.3605215973588627, 0.6293363080378696, 0.26763368896641776, 0.2087897150724408, 0.12752155494758327, 0.7617352745286287, 0.7278924484920478, 0.5097524611402023, 0.08563746784353303, 0.16723586930515025, 0.48449027689804325, 0.5317537759939511, 0.7841812413541516, 0.87383013565676, 0.30579300036783935, 0.758864406801931, 0.6156125567100899, 0.30999731123201546, 0.6793137076459027, 0.21287893569151298, 0.458641546542635, 0.824659135899445, 0.20088642751830332, 0.7423996899993567, 0.6216298794886197, 0.16864750448266466],
        'loc': [[11,7]],
        'conf':[0.99]
    },
    4: {
        'raw': [0.8849765932696995, 0.9325222906412445, 0.23105314292756307, 0.017052306552817358, 0.9465632129625651, 0.8136472345325668, 0.20887228527560067, 0.35728930936907005, 0.9410826979263537, 0.6413944395330793, 0.005233946702879939, 0.2277967785753395, 0.06812859356451277, 0.014470197473645103, 0.9333571789476173, 0.016202428512472597, 0.6169325030750037, 0.952990683553982, 0.33089505604626107, 0.05346740579338666, 0.0764408560120424, 0.04705619657172059, 0.027018208531663646, 0.028461339438005162, 0.14215653440929862, 0.9124811323829882, 0.4649970367500924, 0.013959191858579916, 0.040275152330210985, 0.2863345779842138, 0.5507791668288721, 0.9589525603830441, 0.010158897148353266, 0.036380247033653675, 0.01775577325276567, 0.042351224548598805, 0.8729621436210676, 0.3162080554127904, 0.009500963458872951, 0.021960039474126274, 0.7657786317825948, 0.8398514322747181, 0.020607556512146668, 0.9559997811161411, 0.34134570241004036, 0.923010058721143, 0.6018159610652349, 0.06257153790538142, 0.014515981334671614, 0.022029112475113573, 0.7546612946543562, 0.2294630134324183, 0.24553031594302085, 0.048510620935078214, 0.8988170500535482, 0.10895249292998087, 0.09810524765805842, 0.2945538675371919, 0.3264585829048968, 0.8750890198183441, 0.37958575934958816, 0.055162844520765246, 0.21502431539979727, 0.11849910043695994],
        'loc': [1,6],
        'conf':[0.99]
    },
    5: {
        'raw': [0.4297209474075195, 0.538923060406429, 0.15796585061981827, 0.27832710188802057, 0.20503045108276013, 0.6301075442657081, 0.2614889234058376, 0.17223148275021377, 0.3702308810348046, 0.7814050931191018, 0.7223105616638104, 0.21622704644543292, 0.17008949300852563, 0.2986977450137933, 0.27641581414412547, 0.13374833567001213, 0.20626657813279825, 0.06308481382693024, 0.10856268352259608, 0.3239045728931383, 0.24021489419411962, 0.22438742491432234, 0.3695460559962969, 0.2817798760777482, 0.46653924453293, 0.15969504220361028, 0.232295962744645, 0.6883396794523204, 0.23109272252921817, 0.20386479165372307, 0.31225181511961564, 0.10037695159155856, 0.726887434342449, 0.6890768407827763, 0.2267975690678283, 0.11001336856699301, 0.7598347116160055, 0.08472623497953427, 0.34950249136870093, 0.15702960051146678, 0.21560974713530612, 0.795635064772447, 0.44236803287430876, 0.048044018773436205, 0.11920945519169238, 0.6280830923682744, 0.09319970447187383, 0.6666256198356176, 0.42394491428368924, 0.19004961845982235, 0.11995687848361561, 0.2036623394149957, 0.47143449841893487, 0.11479808722237998, 0.45093218698248794, 0.11990326870535842, 0.4500823144980362, 0.24833956295263634, 0.32620343986129396, 0.15713147537076186, 0.164058576509856, 0.5448139343310237, 0.08459988950650939, 0.08190656488050808],
        'loc': [[13,7],[6,12],[0,6],[6,13],[7,0]],
        'conf':[0.17,0.33,0.16,0.17,0.16]
    },
    6: {
        'raw': [0.11762126748230327, 0.012241814728332922, 0.013364175625756869, 0.026546222153292855, 0.039394252391620775, 0.6473975669784424, 0.04782274845787838, 0.03246729544449943, 0.0638509980294409, 0.02130849822257636, 0.035075041805517265, 0.05822251236657037, 0.497680371396976, 0.1967305729351919, 0.13869059393428135, 0.21284519219435347, 0.8783684651041835, 0.5932485673395114, 0.8078301891498489, 0.004941388747081985, 0.021466786304361978, 0.24767302222042678, 0.28785478405800907, 0.0912808858882269, 0.011460880054500806, 0.013806807239220332, 0.5775073052978827, 0.06510777177783596, 0.42748012082392156, 0.8733048807173411, 0.028766025372424873, 0.19086142318154828, 0.0692338808903384, 0.0551638573669501, 0.38515678636627443, 0.06664448400925473, 0.013375708849855972, 0.02717681716485932, 0.7428902186488118, 0.021660264059201313, 0.2533131133693327, 0.7643134964989284, 0.4212548520470779, 0.4312222360100392, 0.03262137404246021, 0.8408903274449531, 0.6745329685726096, 0.8826294184885602, 0.03656933184325946, 0.5141969349387828, 0.062198528616106155, 0.020374997003907474, 0.8945582854328216, 0.09517208256481674, 0.10615508227339207, 0.7349089970401901, 0.7864488686893317, 0.8137522645220273, 0.10134075720102792, 0.6589342245853361, 0.8160129984567653, 0.04640839614806374, 0.247301541820049, 0.15617121102446974],
        'loc': [[7,7],[7,3],[4,6]],
        'conf':[0.30,0.31,0.30]
    },
    7: {
        'raw': [0.05743892186909859, 0.13966434588611856, 0.08366612878821494, 0.10572731543303761, 0.3644297136904691, 0.16604857226434747, 0.1650605617201621, 0.23396242180097301, 0.5340871620409202, 0.3968805842993199, 0.4062188915508573, 0.20025328299394654, 0.14189137065070662, 0.14941408725022284, 0.7869008716895892, 0.05583613105931644, 0.05463375876552661, 0.07438717095782543, 0.17172627831048407, 0.612678777679969, 0.669443419806084, 0.7513271071921422, 0.09876717156204867, 0.10892087373736106, 0.12588352972289765, 0.5037842855047789, 0.7585133366064151, 0.11872244409214601, 0.699124115950437, 0.07320029018344368, 0.38157011748844477, 0.06507081326798252, 0.6502750932314469, 0.6381166860708104, 0.16276758211679906, 0.074698466984401, 0.33354456036386204, 0.6528898511402429, 0.8529114082717528, 0.3006269490887115, 0.36161078669814234, 0.17910423152296942, 0.17308603729372804, 0.2869395594745183, 0.5234409909881809, 0.07214859128853857, 0.46666457614101314, 0.4777435856522533, 0.5625742351335723, 0.7733557611818699, 0.39748563534493603, 0.4667415603473212, 0.7553666875212464, 0.11408844623348416, 0.6684559571636718, 0.1984957302471832, 0.09834826439687198, 0.6884663141867347, 0.3314056357908209, 0.1797454417917984, 0.3250141469091949, 0.10863452772938521, 0.05288424349498824, 0.2977767204828232],
        'loc': [[12,7],[11,7],[8,7],[6,9],[7,2]],
        'conf': [0.18, 0.15, 0.15, 0.15,0.16]
    },
    8: {
        'raw': [0.030690666153716305, 0.11290841833552105, 0.029117909503763046, 0.06878292337272773, 0.06889401792287274, 0.17648505578872833, 0.07539970393869523, 0.030484063265827973, 0.05324376630370243, 0.38105023004023586, 0.2399618285158027, 0.10766519270998136, 0.020814659929064085, 0.022398813057851144, 0.040657621961604454, 0.04048837693150855, 0.05120897752052081, 0.03956032515118655, 0.06967266317101511, 0.10782039721509122, 0.06736830923832882, 0.0336115909736812, 0.03747485517751141, 0.08773955952562462, 0.10649886809277295, 0.059451904580346375, 0.0923395028669521, 0.24299346077269912, 0.034706030034370644, 0.08338502459323817, 0.09112051691396891, 0.018535820557156916, 0.13382821836795078, 0.1467898626539341, 0.044580896363359636, 0.04472865098808083, 0.23454608276621858, 0.09919394860341359, 0.12331846227838907, 0.12331822688826177, 0.027993395411646107, 0.4803652420127746, 0.18084688621026726, 0.055624381991777265, 0.024114774550416433, 0.13685444246318898, 0.0498087945460887, 0.0481124383578118, 0.06893977045400015, 0.07383066005747202, 0.11230071316241881, 0.3406275018389761, 0.14958427867276955, 0.06136900964544229, 0.03507177112309037, 0.06981187092900165, 0.04974710500140219, 0.14001798666745274, 0.021628593411781125, 0.2106422084809335, 0.13282508274705015, 0.057473297207638295, 0.06784758666805231, 0.08478677037462486],
        'loc': [],
        "conf":[]
    }
}

]


class TSFServerProxy():
    """
    A class to act as a proxy listener for an instance of the web application
    """

    def __init__(self, websocket_handler):
        """
        Create the proxy listener
        """

        self.websocket_handler = websocket_handler

        # NECESSARY: Need to call the GameListener __init__ in order to be
        # considered a GameListener in the C++ code
        # tsf.GameListener.__init__(self)

    def notify(self, gameState):
        """
        """

        self.websocket_handler.on_game_state(gameState)

    def gameOver(self):
        """
        """

        self.websocket_handler.on_game_over()


class TSFWebApplication(tornado.web.Application):
    """
    The main class to serve the TSF web application
    """

    def __init__(self):
        """
        """

        handlers = [(r"/", MainHandler),
                    (r"/login", LoginHandler),
                    (r"/logout", LogoutHandler),
                    (r"/tsfsocket", TSFWebSocketHandler)]

        settings = dict(
            cookie_secret="__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__",
            template_path=os.path.join(os.path.dirname(__file__), "web/templetes"),
            static_path=os.path.join(os.path.dirname(__file__), "web/static"),
            xsrf_cookies=True,
        )
        super(TSFWebApplication, self).__init__(handlers, **settings)


class BaseHandler(tornado.web.RequestHandler):
    """
    Common functionality for all handlers
    """

    def get_current_user(self):
        return self.get_secure_cookie("user")


class MainHandler(BaseHandler):
    """
    The handler for serving the main html page
    """

    def get(self):
        """
        Send index.html
        """

        # If there isn't a logged in user, redirect to the login page
        if not self.current_user:
            print("User Not Logged In")
            self.redirect("/login")
            return
        else:
            print("User Logged In:", self.current_user)

        # Otherwise, redirect to the game
        self.render("traffic_junction.html", error=None)


class LoginHandler(BaseHandler):
    """
    The handler for letting the user login
    """

    def get(self):
        """
        Send the login page
        """

        self.render("login_tj.html", error=None)

    def post(self):
        """
        Handle reception of a post from the login page.  The post should contain
        an arument "name", which contains the name of the user.
        """

        user_name = self.get_argument("name")

        # If no username is provided, then redirect to the login page
        # TODO:  Add to the template an indication that no user name was provided
        if user_name is None or user_name == "":
            self.render("login_tj.html", error="No Username Provided")
            return

        self.set_secure_cookie("user", self.get_argument("name"))
        self.redirect("/")


class LogoutHandler(BaseHandler):
    """
    The handler for letting the user log out
    """

    def get(self):
        """
        Clear out the login cookie and redirect to the root of the application
        """

        self.clear_cookie("user")
        self.redirect("/")


class TSFWebSocketHandler(tornado.websocket.WebSocketHandler):
    """
    A class for handling bidirectional communication between the browser client
    and an instance of TSF running on the server
    """

    def get_compression_options(self):
        # Non-None enables compression with default options
        return {}

    def gameHandler(self):
        """
        """

        # Send the player command
        self.player.command(self.playerCommand)
        self.playerCommand.fire = False
        self.agent.update()

        # Tick the clock
        self.game.gameClock.tick()

    def open(self):
        """

        """

        self.username = self.get_secure_cookie("user").decode()



        print('Game start')
        self.numTrial = 40
        self.best = 20
        self.currentTrial = 1

        self.gameHandlerCallback = tornado.ioloop.PeriodicCallback(self.gameHandler, 1)

        # Player command to be updated as messages are received
        self.playerCommand = None


        self.condition = np.random.randint(3)
        # self.condition = 0

    def on_close(self):
        """
        The WebSocket is closed.  Logger results need to be saved.
        """

        # Perform a Game Over in order to close out, e.g., logger
        if hasattr(self, 'gameState'):
            self.on_game_over()

        # Kill the agent thread
        #        self.agent.stop()
        #        self.agent.kill()
        self.gameHandlerCallback.stop()
        # Get rid of the instance of builder and game
        # del self.logger

    #        del self.agent

    def load(self, args, path):
        # d = torch.load(path)
        # policy_net.load_state_dict(d['policy_net'])
        model_name = ['tj_fixed_human/tj_EX_fixed_proto_comm_vs_protos_medium_p112_c64_d',
                      'tj_med_sparse_human/tj_EX_soft_medium_proto_rew_cur_verge_sb_0.5_d',
                      'tj_min_sparse_human/tj_EX_soft_medium_proto_rew_cur_verge_sb_0.3_d']
        args.seed = 777
        args.exp_name = model_name[self.condition]
        self.token_dict = token_dicts[self.condition]
        load_path = os.path.join(args.load, args.env_name, args.exp_name, "seed" + str(args.seed), "models")
        print(f"load directory is {load_path}")
        log_path = os.path.join(args.load, args.env_name, args.exp_name, "seed" + str(args.seed), "logs")
        print(f"log dir directory is {log_path}")
        save_path = load_path

        if 'model.pt' in os.listdir(load_path):
            print(load_path)
            model_path = os.path.join(load_path, "model.pt")

        else:
            all_models = sort([int(f.split('.pt')[0]) for f in os.listdir(load_path)])
            model_path = os.path.join(load_path, f"{all_models[-1]}.pt")

        d = torch.load(model_path)
        self.policy_net.load_state_dict(d['policy_net'], strict=False)

    def on_message(self, message):
        """
        """

        #        if message=="start":
        #            self.game.start()
        #            self.gameHandlerCallback.start()
        #            return

        # Try parsing as json
        try:
            message_json = json.loads(message)
        except:
            # Not JSON, so just return
            return

        if message_json["type"] == "information" and message_json["message"] == "start":
            '''
            # Create an instance of the TSF game
            self.builder=tsf.JsonGameBuilder("configs/sf_config.json")
            self.game=self.builder.build()
            self.logger=tsf.Logger()
            self.game.addListener(self.logger)
            self.player = self.builder.getPlayer(0)

            agent_class = agents.repo[self.agent_class_name][0]
            self.agent = agent_class(self.builder.getPlayer(1))
            self.game.addListener(self.agent)

            # Create a proxy listener and link it to the game
            self.proxy_listener=TSFServerProxy(self)
            self.game.addListener(self.proxy_listener)

            self.game.reset()
            self.logger.reset()
            self.game.start()
            self.gameHandlerCallback.start()
            '''



            torch.utils.backcompat.broadcast_warning.enabled = True
            torch.utils.backcompat.keepdim_warning.enabled = True
            torch.set_default_tensor_type('torch.DoubleTensor')
            self.t = 0
            parser = get_args()
            init_args_for_env(parser)
            args = parser.parse_args()
            # if self.condition:
            #     args.hid_size = 81  # Was 128 for proto; 81 for one-hot
            #     args.num_proto = 81
            #     args.comm_dim = 81
            #     args.use_protos = False



            if args.ic3net:
                args.commnet = 1
                args.hard_attn = 1
                args.mean_ratio = 0

                # For TJ set comm action to 1 as specified in paper to showcase
                # importance of individual rewards even in cooperative games
                # if args.env_name == "traffic_junction":
                #     args.comm_action_one = True
            # Enemy comm
            args.nfriendly = args.nagents
            if hasattr(args, 'enemy_comm') and args.enemy_comm:
                if hasattr(args, 'nenemies'):
                    args.nagents += args.nenemies
                else:
                    raise RuntimeError("Env. needs to pass argument 'nenemy'.")

            self.env = data.init(args.env_name, args, False)

            num_inputs = self.env.observation_dim
            args.num_actions = self.env.num_actions

            # Multi-action
            if not isinstance(args.num_actions, (list, tuple)):  # single action case
                args.num_actions = [args.num_actions]
            args.dim_actions = self.env.dim_actions
            args.num_inputs = num_inputs

            # Hard attention
            if args.hard_attn and args.commnet:
                # add comm_action as last dim in actions
                args.num_actions = [*args.num_actions, 2]
                args.dim_actions = self.env.dim_actions + 1

            # Recurrence
            if args.commnet and (args.recurrent or args.rnn_type == 'LSTM'):
                args.recurrent = True
                args.rnn_type = 'LSTM'

            parse_action_args(args)

            if args.seed == -1:
                args.seed = np.random.randint(0, 10000)
            torch.manual_seed(args.seed)

            print(args)
            print(args.seed)

            if args.commnet:
                self.policy_net = CommNetMLP(args, num_inputs, train_mode=False)
            elif args.random:
                self.policy_net = Random(args, num_inputs)

            # this is what we are working with for IC3 Net predator prey.
            elif args.recurrent:
                self.policy_net = RNN(args, num_inputs)
            else:
                self.policy_net = MLP(args, num_inputs)

            self.load(args, args.load)

            if not args.display:
                display_models([self.policy_net])

            # share parameters among threads, but not gradients
            for p in self.policy_net.parameters():
                p.data.share_memory_()

            self.args = args

            self.all_comms = []
            self.episode = []
            epoch = 1
            reset_args = getfullargspec(self.env.reset).args
            if 'epoch' in reset_args:
                self.state = self.env.reset(epoch)
            else:
                self.state = self.env.reset()
            should_display = False

            # if should_display:
            #    self.env.display()
            self.stat = dict()
            self.info = dict()
            switch_t = -1

            self.prev_hid = torch.zeros(1, self.args.nagents, self.args.hid_size)

            self.done = False
            self.step = 0
            self.history = []
            self.actionList = []
            self.moveRT = []
            self.results = 'other'



            while not self.env.get_alive_wrapper(0):
                if self.step > 20 or self.done:
                    if 'epoch' in reset_args:
                        self.state = self.env.reset(epoch)
                    else:
                        self.state = self.env.reset()
                    self.step = 0
                should_display = False
                t = self.t
                misc = dict()
                if t == 0 and self.args.hard_attn and self.args.commnet:
                    self.info['comm_action'] = np.zeros(self.args.nagents, dtype=int)

                self.info['record_comms'] = 99
                # recurrence over time
                if self.args.recurrent:
                    if self.args.rnn_type == 'LSTM' and t == 0:
                        self.prev_hid = self.policy_net.init_hidden(batch_size=self.state.shape[0])

                    x = [self.state, self.prev_hid]
                    action_out, value, self.prev_hid, filtered_comms = self.policy_net(x, self.info)

                    if (t + 1) % self.args.detach_gap == 0:
                        if self.args.rnn_type == 'LSTM':
                            self.prev_hid = (self.prev_hid[0].detach(), self.prev_hid[1].detach())
                        else:
                            self.prev_hid = self.prev_hid.detach()
                else:
                    x = self.state
                    action_out, value, filtered_comms = self.policy_net(x, self.info)

                # print(action_out)


                action = select_action(self.args, action_out)
                # print(action)
                action, actual = translate_action(self.args, self.env, action)

                # actual[0] = self.humanAction
                next_state, reward, done, info = self.env.step(actual)
                # print(next_state)
                # print(self.env.get_pp_loc_wrapper())

                # store comm_action in info for next step
                if self.args.hard_attn and self.args.commnet:
                    info['comm_action'] = action[-1] if not self.args.comm_action_one else np.ones(self.args.nagents,
                                                                                                   dtype=int)

                    # print("before ", stat.get('comm_action', 0), info['comm_action'][:self.args.nfriendly])
                    self.stat['comm_action'] = self.stat.get('comm_action', 0) + info['comm_action'][
                                                                                 :self.args.nfriendly]
                    self.all_comms.append(info['comm_action'][:self.args.nfriendly])
                    if hasattr(self.args, 'enemy_comm') and self.args.enemy_comm:
                        self.stat['enemy_comm'] = self.stat.get('enemy_comm', 0) + info['comm_action'][
                                                                                   self.args.nfriendly:]

                if 'alive_mask' in info:
                    misc['alive_mask'] = info['alive_mask'].reshape(reward.shape)
                else:
                    misc['alive_mask'] = np.ones_like(reward)

                # env should handle this make sure that reward for dead agents is not counted
                # reward = reward * misc['alive_mask']

                self.stat['reward'] = self.stat.get('reward', 0) + reward[:self.args.nfriendly]
                if hasattr(self.args, 'enemy_comm') and self.args.enemy_comm:
                    self.stat['enemy_reward'] = self.stat.get('enemy_reward', 0) + reward[self.args.nfriendly:]

                self.collisionOrNot, self.collisionLocation = self.env.get_reached_wrapper()
                self.done = done or self.step >= self.args.max_steps or bool(self.collisionOrNot)

                episode_mask = np.ones(reward.shape)
                episode_mini_mask = np.ones(reward.shape)

                if self.done:
                    episode_mask = np.zeros(reward.shape)
                else:
                    if 'is_completed' in info:
                        episode_mini_mask = 1 - info['is_completed'].reshape(-1)

                if should_display:
                    self.env.display()

                trans = Transition(self.state, action, action_out, value, episode_mask, episode_mini_mask, next_state,
                                   reward, misc)
                self.episode.append(trans)
                self.state = next_state
                self.t = t + 1
                self.info = info
                self.step += 1



            if t == 0 and self.args.hard_attn and self.args.commnet:
                self.info['comm_action'] = np.zeros(self.args.nagents, dtype=int)

            self.info['record_comms'] = 99
            # recurrence over time
            if self.args.recurrent:
                if self.args.rnn_type == 'LSTM' and t == 0:
                    self.prev_hid = self.policy_net.init_hidden(batch_size=self.state.shape[0])

                x = [self.state, self.prev_hid]
                self.action_out, self.value, self.prev_hid, filtered_comms = self.policy_net(x, self.info)

                if (t + 1) % self.args.detach_gap == 0:
                    if self.args.rnn_type == 'LSTM':
                        self.prev_hid = (self.prev_hid[0].detach(), self.prev_hid[1].detach())
                    else:
                        self.prev_hid = self.prev_hid.detach()
            else:
                x = self.state
                self.action_out, self.value, filtered_comms = self.policy_net(x, self.info)

            # print(action_out)
            print('filtered_comms', filtered_comms)
            self.message = {}
            for i in range(10):
                if self.env.get_alive_wrapper(i):
                    for j in range(1, len(self.token_dict)+1):
                        if torch.allclose(torch.tensor(self.token_dict[j]['raw']), filtered_comms[i], atol=1e-04):
                            self.message[i] = {"loc": self.token_dict[j]['loc'], "conf": self.token_dict[j]['conf']}
                else:
                    self.message[i] = {}

            print(self.message)

            self.human_path = self.env.get_path_wrapper(0)
            self.initialStep = self.step
            self.car_loc = self.env.get_loc_wrapper()
            print(self.car_loc)
            self.history.append(self.car_loc.tolist())
            self.gameState = {
                'players': self.car_loc.tolist(),
                'humanPath': self.human_path,
                'comm': self.token_dict,
                'message': self.message,
                'step': self.step,
                'done': self.done,
                'currentTrial': self.currentTrial,
                'history': self.history,
                'condition':self.condition
            }

            self.gameStateJson = json.dumps(self.gameState)
            self.startTimer = time.time()

            if self.currentTrial == 12:
                self.write_message({'attentionCheck':True})
                return
            self.write_message(self.gameStateJson)

            return

        if message_json["type"] == "command":

            # Pull out the command
            command = message_json["message"]

            # Pull out human role and check if function is correctly triggered
            # humanRole = message_json["humanRole"]

            if self.currentTrial == 12:
                self.gameState = {
                    'players': None,
                    'humanPath': None,
                    'comm': self.token_dict,
                    'message': None,
                    'moveRT': None,
                    'step': None,
                    'best': None,
                    'done': None,
                    'results': command,
                    'collisionLocation': None,
                    'currentTrial': None,
                    'history': None,
                    'condition':self.condition
                }
                self.currentTrial += 1
                self.save_log()

                self.gameState = {
                    'players': self.car_loc.tolist(),
                    'humanPath': self.human_path,
                    'comm': self.token_dict,
                    'message': self.message,
                    'step': self.step,
                    'done': self.done,
                    'currentTrial': self.currentTrial,
                    'history': self.history,
                    'condition': self.condition
                }
                self.startTimer = time.time()

                self.gameStateJson = json.dumps(self.gameState)
                self.write_message(self.gameStateJson)
                return



            if self.step != self.initialStep and self.done:
                print('reject invalid action')
                return




            if command["command"] == "go":
                self.humanAction = 0
            elif command["command"] == "brake":
                self.humanAction = 1
            else:
                return

            self.actionList.append(self.humanAction)

            if self.step == self.initialStep:
                self.moveRT.append(time.time() - self.startTimer)
                self.lastMove = time.time()
            else:
                self.moveRT.append(time.time() - self.lastMove)
                self.lastMove = time.time()
            self.info['replace_comm'] = False
            self.step += 1

            should_display = False
            t = self.t
            misc = dict()


            action = select_action(self.args, self.action_out)
            # print(action)
            action, actual = translate_action(self.args, self.env, action)
            print('actual',actual)
            actual[0][0] = self.humanAction
            print('modified actual', actual)
            next_state, reward, done, info = self.env.step(actual)
            # print(next_state)
            # print(self.env.get_pp_loc_wrapper())

            # store comm_action in info for next step
            if self.args.hard_attn and self.args.commnet:
                info['comm_action'] = action[-1] if not self.args.comm_action_one else np.ones(self.args.nagents,
                                                                                               dtype=int)

                # print("before ", stat.get('comm_action', 0), info['comm_action'][:self.args.nfriendly])
                self.stat['comm_action'] = self.stat.get('comm_action', 0) + info['comm_action'][
                                                                             :self.args.nfriendly]
                self.all_comms.append(info['comm_action'][:self.args.nfriendly])
                if hasattr(self.args, 'enemy_comm') and self.args.enemy_comm:
                    self.stat['enemy_comm'] = self.stat.get('enemy_comm', 0) + info['comm_action'][
                                                                               self.args.nfriendly:]

            if 'alive_mask' in info:
                misc['alive_mask'] = info['alive_mask'].reshape(reward.shape)
            else:
                misc['alive_mask'] = np.ones_like(reward)

            # env should handle this make sure that reward for dead agents is not counted
            # reward = reward * misc['alive_mask']

            self.stat['reward'] = self.stat.get('reward', 0) + reward[:self.args.nfriendly]
            if hasattr(self.args, 'enemy_comm') and self.args.enemy_comm:
                self.stat['enemy_reward'] = self.stat.get('enemy_reward', 0) + reward[self.args.nfriendly:]

            self.collisionOrNot, self.collisionLocation = self.env.get_reached_wrapper()
            # self.done = done or self.step >= self.args.max_steps or bool(self.collisionOrNot) or not bool(self.env.get_alive_wrapper(0))
            self.reached = (self.human_path[-1][0] == self.car_loc[0][0]) and (self.human_path[-1][1] == self.car_loc[0][1])
            self.done = done or self.step >= self.args.max_steps or bool(self.collisionOrNot) or bool(self.reached)

            episode_mask = np.ones(reward.shape)
            episode_mini_mask = np.ones(reward.shape)

            if self.done:
                episode_mask = np.zeros(reward.shape)
            else:
                if 'is_completed' in info:
                    episode_mini_mask = 1 - info['is_completed'].reshape(-1)


            trans = Transition(self.state, action, self.action_out, self.value, episode_mask, episode_mini_mask, next_state,
                               reward, misc)
            self.episode.append(trans)
            self.state = next_state
            self.t = t + 1
            self.info = info





            if bool(self.collisionOrNot):
                self.results = 'collision'
            elif bool(self.reached):
                self.results = 'success'
            elif self.step >= self.args.max_steps:
                self.results = 'timeout'
            else:
                self.results = 'other'
            print(self.results)





            if self.done:
                self.currentTrial += 1
                if self.step < self.best:
                    self.best = self.step
                self.save_log()


            if t == 0 and self.args.hard_attn and self.args.commnet:
                self.info['comm_action'] = np.zeros(self.args.nagents, dtype=int)

            self.info['record_comms'] = 99
            # recurrence over time
            if self.args.recurrent:
                if self.args.rnn_type == 'LSTM' and t == 0:
                    self.prev_hid = self.policy_net.init_hidden(batch_size=self.state.shape[0])

                x = [self.state, self.prev_hid]
                self.action_out, self.value, self.prev_hid, filtered_comms = self.policy_net(x, self.info)

                if (t + 1) % self.args.detach_gap == 0:
                    if self.args.rnn_type == 'LSTM':
                        self.prev_hid = (self.prev_hid[0].detach(), self.prev_hid[1].detach())
                    else:
                        self.prev_hid = self.prev_hid.detach()
            else:
                x = self.state
                self.action_out, self.value, filtered_comms = self.policy_net(x, self.info)

            # print(action_out)
            print('filtered_comms', filtered_comms)
            self.message = {}
            for i in range(10):
                if self.env.get_alive_wrapper(i):
                    for j in range(1, len(self.token_dict)+1):
                        if torch.allclose(torch.tensor(self.token_dict[j]['raw']), filtered_comms[i], atol=1e-04):
                            self.message[i] = {"loc": self.token_dict[j]['loc'], "conf": self.token_dict[j]['conf']}
                else:
                    self.message[i] = {}

            print(self.message)

            self.car_loc = self.env.get_loc_wrapper()
            print(self.car_loc)
            self.history.append(self.car_loc.tolist())
            self.gameState = {
                'players': self.car_loc.tolist(),
                'humanPath': self.human_path,
                'comm': self.token_dict,
                'message': self.message,

                'moveRT': self.moveRT,
                'step': self.step,
                'best': self.best,
                'done': self.done,
                'results': self.results,
                'collisionLocation': self.collisionLocation,
                'currentTrial': self.currentTrial,
                'history': self.history,
                'actionList': self.actionList,
                'condition': self.condition
            }

            self.gameStateJson = json.dumps(self.gameState)

            self.write_message(self.gameStateJson)





        if message_json['type']=='survey':

            self.surveyResults = {
                'name':self.username,
                "randomCode":message_json["randomCode"],
                "helpful":message_json["helpful"],
                "understand":message_json["understand"],
                "satisfy":message_json["satisfy"],
                "Post_difficulty": message_json["Post_difficulty"],
                "Post_how":message_json["Post_how"],
                "Post_feedback": message_json["Post_feedback"],
            }

            self.save_log()



    def save_log(self):

        print("log saved")

        # random.choice(string.ascii_uppercase) for _ in range(8)
        # Dump the log

        if hasattr(self, 'surveyResults'):
            log_path = os.path.join(LOG_ROOT, self.username)

            # Create the folder, if it doesn't exist
            if not os.path.exists(log_path):
                os.makedirs(log_path)
                print("Created path: ", log_path)

            # Create a unique filename
            now = datetime.datetime.now(dateutil.tz.tzlocal()).strftime('%Y_%m_%d_%H_%M_%S')
            if self.condition ==1:
                group = 'med'
            elif self.condition == 2:
                group = 'min'
            else:
                group = 'fixed'
            random_string = now + '_' + '_'.join([group, self.username])
            log_filename = 'survey_results_%s.json' % random_string
            # metadata_filename = 'game_log_%s.meta' % random_string
            existing_files = os.listdir(log_path)

            log_file_path = os.path.join(log_path, log_filename)
            # meta_file_path = os.path.join(log_path,metadata_filename)

            print("Log filename: %s" % log_file_path)
            # print("Metadata path: %s" % meta_file_path)

            with open(log_file_path, 'a+') as outfile:
                json.dump(self.surveyResults, outfile)

        if self.gameState is not None:
            log_path = os.path.join(LOG_ROOT, self.username)

            # Create the folder, if it doesn't exist
            if not os.path.exists(log_path):
                os.makedirs(log_path)
                print("Created path: ", log_path)

            # Create a unique filename
            now = datetime.datetime.now(dateutil.tz.tzlocal()).strftime('%Y_%m_%d_%H_%M_%S')
            if self.condition ==1:
                group = 'med'
            elif self.condition == 2:
                group = 'min'
            else:
                group = 'fixed'
            random_string = now + '_' + '_'.join([group, self.username, str(self.currentTrial)])
            log_filename = 'game_log_%s.json' % random_string
            # metadata_filename = 'game_log_%s.meta' % random_string
            existing_files = os.listdir(log_path)


            log_file_path = os.path.join(log_path, log_filename)
            # meta_file_path = os.path.join(log_path,metadata_filename)

            print("Log filename: %s" % log_file_path)
            # print("Metadata path: %s" % meta_file_path)

            with open(log_file_path, 'a+') as outfile:
                json.dump(self.gameState, outfile)

            # with open(meta_file_path,'w') as meta_file:
            #     meta_file.write('Agent Class: %s\n' % self.agent_class_name)


    def on_game_over(self):
        print("log saved")

        # random.choice(string.ascii_uppercase) for _ in range(8)
        # Dump the log
        if self.gameState is not None:
            log_path = os.path.join(LOG_ROOT, self.username)

            # Create the folder, if it doesn't exist
            if not os.path.exists(log_path):
                os.makedirs(log_path)
                print("Created path: ", log_path)

            # Create a unique filename
            now = datetime.datetime.now(dateutil.tz.tzlocal()).strftime('%Y_%m_%d_%H_%M_%S')
            if self.condition ==1:
                group = 'med'
            elif self.condition == 2:
                group = 'min'
            else:
                group = 'fixed'
            random_string = now + '_' + '_'.join([group, self.username, str(self.currentTrial)])
            log_filename = 'game_log_%s.json' % random_string
            # metadata_filename = 'game_log_%s.meta' % random_string
            existing_files = os.listdir(log_path)

            log_file_path = os.path.join(log_path, log_filename)
            # meta_file_path = os.path.join(log_path,metadata_filename)

            print("Log filename: %s" % log_file_path)
            # print("Metadata path: %s" % meta_file_path)

            with open(log_file_path, 'a+') as outfile:
                json.dump(self.gameState, outfile)

            # with open(meta_file_path,'w') as meta_file:
            #     meta_file.write('Agent Class: %s\n' % self.agent_class_name)





if __name__ == "__main__":
    tornado.options.parse_command_line()
    app = TSFWebApplication()
    app.listen(options.port)
    tornado.ioloop.IOLoop.current().start()
